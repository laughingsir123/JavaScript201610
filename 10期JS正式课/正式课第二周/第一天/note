1.关于Function 和 Object的关系
1）Function是Object的爹；
2）Object是Function的爹
3）Object.prototype 是 Function.prototype的爹
2.Function.prototype：本质是一个匿名函数，但是它具有跟普通的prototype一样的功能；都有constructor,__proto__
Function.prototype这个公有空间中：call，apply，bind
3.函数的三种角色：
1）普通函数：形成私有作用域-形参赋值-预解释-代码从上到下的执行； 内存释放；
2）类：实例，类，原型三个打交道； constructor：指向当前这个类； __proto__原型链：当前实例所属类的原型；
3）对象：具有普通对象的特点：属性和方法；
4.既然每个类都是Function这个类的实例，那么每个类（每个函数数据类型）都可以使用Function.prototype的上的公有方法；
5.call和apply的区别：
call传参，从第二个参数开始，一个个的传参；
apply，从第二个参数开始，以一个数组的形式传参，但是，对于前面的函数来说，接受参数的时候，还是从左往右一个个的接收的；
bind:bind属于预处理机制；--bind的传参形式跟call一样；
1）先改变函数中的this指向，同时对函数中的参数进行赋值
2）返回一个经过修改后的函数
3）在我们需要的时候，手动调用这个函数；
6.
在严格模式下，传什么，this就是什么
    // fn.call(undefined);
    // fn.call(null)
    //fn.call()
在非严格模式下，传undefined和null 拿到的都是window
    //fn.call()
    //fn.call(undefined)
    //fn.call(null)
7.throw new Error(e); 手动抛出错误；
8.关于排序的思路：
1）类数组转数组
2）sort排序
3）把排好序的数组中的每一项，重新插入页面；
9.数字排序:sort(function(a,b){return a-b})
汉字排序：sort(function(a,b){return a.localeCompare(b)})